#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBTestS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VCT")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBrowser(Browser instance);
    partial void UpdateBrowser(Browser instance);
    partial void DeleteBrowser(Browser instance);
    partial void InsertEnvironment(Environment instance);
    partial void UpdateEnvironment(Environment instance);
    partial void DeleteEnvironment(Environment instance);
    partial void InsertResolution(Resolution instance);
    partial void UpdateResolution(Resolution instance);
    partial void DeleteResolution(Resolution instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    partial void InsertTestResult(TestResult instance);
    partial void UpdateTestResult(TestResult instance);
    partial void DeleteTestResult(TestResult instance);
    partial void InsertRunningOS(RunningOS instance);
    partial void UpdateRunningOS(RunningOS instance);
    partial void DeleteRunningOS(RunningOS instance);
    partial void InsertStableFile(StableFile instance);
    partial void UpdateStableFile(StableFile instance);
    partial void DeleteStableFile(StableFile instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::DBTestS.Properties.Settings.Default.VCTConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Browser> Browsers
		{
			get
			{
				return this.GetTable<Browser>();
			}
		}
		
		public System.Data.Linq.Table<Environment> Environments
		{
			get
			{
				return this.GetTable<Environment>();
			}
		}
		
		public System.Data.Linq.Table<Resolution> Resolutions
		{
			get
			{
				return this.GetTable<Resolution>();
			}
		}
		
		public System.Data.Linq.Table<Test> Tests
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
		
		public System.Data.Linq.Table<TestResult> TestResults
		{
			get
			{
				return this.GetTable<TestResult>();
			}
		}
		
		public System.Data.Linq.Table<RunningOS> RunningOS
		{
			get
			{
				return this.GetTable<RunningOS>();
			}
		}
		
		public System.Data.Linq.Table<StableFile> StableFiles
		{
			get
			{
				return this.GetTable<StableFile>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Browser")]
	public partial class Browser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrowserId;
		
		private string _Browser1;
		
		private EntitySet<Environment> _Environments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrowserIdChanging(int value);
    partial void OnBrowserIdChanged();
    partial void OnBrowserNameChanging(string value);
    partial void OnBrowserNameChanged();
    #endregion
		
		public Browser()
		{
			this._Environments = new EntitySet<Environment>(new Action<Environment>(this.attach_Environments), new Action<Environment>(this.detach_Environments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrowserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BrowserId
		{
			get
			{
				return this._BrowserId;
			}
			set
			{
				if ((this._BrowserId != value))
				{
					this.OnBrowserIdChanging(value);
					this.SendPropertyChanging();
					this._BrowserId = value;
					this.SendPropertyChanged("BrowserId");
					this.OnBrowserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Browser", Storage="_Browser1", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string BrowserName
		{
			get
			{
				return this._Browser1;
			}
			set
			{
				if ((this._Browser1 != value))
				{
					this.OnBrowserNameChanging(value);
					this.SendPropertyChanging();
					this._Browser1 = value;
					this.SendPropertyChanged("BrowserName");
					this.OnBrowserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Browser_Environment", Storage="_Environments", ThisKey="BrowserId", OtherKey="BrowserId")]
		public EntitySet<Environment> Environments
		{
			get
			{
				return this._Environments;
			}
			set
			{
				this._Environments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Environments(Environment entity)
		{
			this.SendPropertyChanging();
			entity.Browser = this;
		}
		
		private void detach_Environments(Environment entity)
		{
			this.SendPropertyChanging();
			entity.Browser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Environment")]
	public partial class Environment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnvironmentId;
		
		private int _OSId;
		
		private int _BrowserId;
		
		private int _ResolutionId;
		
		private EntitySet<StableFile> _StableFiles;
		
		private EntityRef<Browser> _Browser;
		
		private EntityRef<Resolution> _Resolution;
		
		private EntityRef<RunningOS> _RunningOS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnvironmentIdChanging(int value);
    partial void OnEnvironmentIdChanged();
    partial void OnOSIdChanging(int value);
    partial void OnOSIdChanged();
    partial void OnBrowserIdChanging(int value);
    partial void OnBrowserIdChanged();
    partial void OnResolutionIdChanging(int value);
    partial void OnResolutionIdChanged();
    #endregion
		
		public Environment()
		{
			this._StableFiles = new EntitySet<StableFile>(new Action<StableFile>(this.attach_StableFiles), new Action<StableFile>(this.detach_StableFiles));
			this._Browser = default(EntityRef<Browser>);
			this._Resolution = default(EntityRef<Resolution>);
			this._RunningOS = default(EntityRef<RunningOS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnvironmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnvironmentId
		{
			get
			{
				return this._EnvironmentId;
			}
			set
			{
				if ((this._EnvironmentId != value))
				{
					this.OnEnvironmentIdChanging(value);
					this.SendPropertyChanging();
					this._EnvironmentId = value;
					this.SendPropertyChanged("EnvironmentId");
					this.OnEnvironmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSId", DbType="Int NOT NULL")]
		public int OSId
		{
			get
			{
				return this._OSId;
			}
			set
			{
				if ((this._OSId != value))
				{
					if (this._RunningOS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOSIdChanging(value);
					this.SendPropertyChanging();
					this._OSId = value;
					this.SendPropertyChanged("OSId");
					this.OnOSIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrowserId", DbType="Int NOT NULL")]
		public int BrowserId
		{
			get
			{
				return this._BrowserId;
			}
			set
			{
				if ((this._BrowserId != value))
				{
					if (this._Browser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrowserIdChanging(value);
					this.SendPropertyChanging();
					this._BrowserId = value;
					this.SendPropertyChanged("BrowserId");
					this.OnBrowserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolutionId", DbType="Int NOT NULL")]
		public int ResolutionId
		{
			get
			{
				return this._ResolutionId;
			}
			set
			{
				if ((this._ResolutionId != value))
				{
					if (this._Resolution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResolutionIdChanging(value);
					this.SendPropertyChanging();
					this._ResolutionId = value;
					this.SendPropertyChanged("ResolutionId");
					this.OnResolutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Environment_StableFile", Storage="_StableFiles", ThisKey="EnvironmentId", OtherKey="EnvironmentId")]
		public EntitySet<StableFile> StableFiles
		{
			get
			{
				return this._StableFiles;
			}
			set
			{
				this._StableFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Browser_Environment", Storage="_Browser", ThisKey="BrowserId", OtherKey="BrowserId", IsForeignKey=true)]
		public Browser Browser
		{
			get
			{
				return this._Browser.Entity;
			}
			set
			{
				Browser previousValue = this._Browser.Entity;
				if (((previousValue != value) 
							|| (this._Browser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Browser.Entity = null;
						previousValue.Environments.Remove(this);
					}
					this._Browser.Entity = value;
					if ((value != null))
					{
						value.Environments.Add(this);
						this._BrowserId = value.BrowserId;
					}
					else
					{
						this._BrowserId = default(int);
					}
					this.SendPropertyChanged("Browser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resolution_Environment", Storage="_Resolution", ThisKey="ResolutionId", OtherKey="ResolutionId", IsForeignKey=true)]
		public Resolution Resolution
		{
			get
			{
				return this._Resolution.Entity;
			}
			set
			{
				Resolution previousValue = this._Resolution.Entity;
				if (((previousValue != value) 
							|| (this._Resolution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resolution.Entity = null;
						previousValue.Environments.Remove(this);
					}
					this._Resolution.Entity = value;
					if ((value != null))
					{
						value.Environments.Add(this);
						this._ResolutionId = value.ResolutionId;
					}
					else
					{
						this._ResolutionId = default(int);
					}
					this.SendPropertyChanged("Resolution");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RunningO_Environment", Storage="_RunningOS", ThisKey="OSId", OtherKey="OSId", IsForeignKey=true)]
		public RunningOS RunningOS
		{
			get
			{
				return this._RunningOS.Entity;
			}
			set
			{
				RunningOS previousValue = this._RunningOS.Entity;
				if (((previousValue != value) 
							|| (this._RunningOS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RunningOS.Entity = null;
						previousValue.Environments.Remove(this);
					}
					this._RunningOS.Entity = value;
					if ((value != null))
					{
						value.Environments.Add(this);
						this._OSId = value.OSId;
					}
					else
					{
						this._OSId = default(int);
					}
					this.SendPropertyChanged("RunningOS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StableFiles(StableFile entity)
		{
			this.SendPropertyChanging();
			entity.Environment = this;
		}
		
		private void detach_StableFiles(StableFile entity)
		{
			this.SendPropertyChanging();
			entity.Environment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resolution")]
	public partial class Resolution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResolutionId;
		
		private int _ResolutionWidth;
		
		private string _ResolutionHeight;
		
		private EntitySet<Environment> _Environments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResolutionIdChanging(int value);
    partial void OnResolutionIdChanged();
    partial void OnResolutionWidthChanging(int value);
    partial void OnResolutionWidthChanged();
    partial void OnResolutionHeightChanging(string value);
    partial void OnResolutionHeightChanged();
    #endregion
		
		public Resolution()
		{
			this._Environments = new EntitySet<Environment>(new Action<Environment>(this.attach_Environments), new Action<Environment>(this.detach_Environments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolutionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResolutionId
		{
			get
			{
				return this._ResolutionId;
			}
			set
			{
				if ((this._ResolutionId != value))
				{
					this.OnResolutionIdChanging(value);
					this.SendPropertyChanging();
					this._ResolutionId = value;
					this.SendPropertyChanged("ResolutionId");
					this.OnResolutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolutionWidth", DbType="Int NOT NULL")]
		public int ResolutionWidth
		{
			get
			{
				return this._ResolutionWidth;
			}
			set
			{
				if ((this._ResolutionWidth != value))
				{
					this.OnResolutionWidthChanging(value);
					this.SendPropertyChanging();
					this._ResolutionWidth = value;
					this.SendPropertyChanged("ResolutionWidth");
					this.OnResolutionWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolutionHeight", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ResolutionHeight
		{
			get
			{
				return this._ResolutionHeight;
			}
			set
			{
				if ((this._ResolutionHeight != value))
				{
					this.OnResolutionHeightChanging(value);
					this.SendPropertyChanging();
					this._ResolutionHeight = value;
					this.SendPropertyChanged("ResolutionHeight");
					this.OnResolutionHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resolution_Environment", Storage="_Environments", ThisKey="ResolutionId", OtherKey="ResolutionId")]
		public EntitySet<Environment> Environments
		{
			get
			{
				return this._Environments;
			}
			set
			{
				this._Environments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Environments(Environment entity)
		{
			this.SendPropertyChanging();
			entity.Resolution = this;
		}
		
		private void detach_Environments(Environment entity)
		{
			this.SendPropertyChanging();
			entity.Resolution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test")]
	public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestId;
		
		private string _Name;
		
		private EntitySet<TestResult> _TestResults;
		
		private EntitySet<StableFile> _StableFiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Test()
		{
			this._TestResults = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults), new Action<TestResult>(this.detach_TestResults));
			this._StableFiles = new EntitySet<StableFile>(new Action<StableFile>(this.attach_StableFiles), new Action<StableFile>(this.detach_StableFiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestResult", Storage="_TestResults", ThisKey="TestId", OtherKey="TestId")]
		public EntitySet<TestResult> TestResults
		{
			get
			{
				return this._TestResults;
			}
			set
			{
				this._TestResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_StableFile", Storage="_StableFiles", ThisKey="TestId", OtherKey="TestId")]
		public EntitySet<StableFile> StableFiles
		{
			get
			{
				return this._StableFiles;
			}
			set
			{
				this._StableFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_StableFiles(StableFile entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_StableFiles(StableFile entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestResult")]
	public partial class TestResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestResultId;
		
		private int _TestId;
		
		private int _StableFileId;
		
		private string _FilePath;
		
		private EntityRef<Test> _Test;
		
		private EntityRef<StableFile> _StableFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestResultIdChanging(int value);
    partial void OnTestResultIdChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnStableFileIdChanging(int value);
    partial void OnStableFileIdChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    #endregion
		
		public TestResult()
		{
			this._Test = default(EntityRef<Test>);
			this._StableFile = default(EntityRef<StableFile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestResultId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestResultId
		{
			get
			{
				return this._TestResultId;
			}
			set
			{
				if ((this._TestResultId != value))
				{
					this.OnTestResultIdChanging(value);
					this.SendPropertyChanging();
					this._TestResultId = value;
					this.SendPropertyChanged("TestResultId");
					this.OnTestResultIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL")]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StableFileId", DbType="Int NOT NULL")]
		public int StableFileId
		{
			get
			{
				return this._StableFileId;
			}
			set
			{
				if ((this._StableFileId != value))
				{
					if (this._StableFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStableFileIdChanging(value);
					this.SendPropertyChanging();
					this._StableFileId = value;
					this.SendPropertyChanged("StableFileId");
					this.OnStableFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NChar(255) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestResult", Storage="_Test", ThisKey="TestId", OtherKey="TestId", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.TestResults.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.TestResults.Add(this);
						this._TestId = value.TestId;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StableFile_TestResult", Storage="_StableFile", ThisKey="StableFileId", OtherKey="StableFileId", IsForeignKey=true)]
		public StableFile StableFile
		{
			get
			{
				return this._StableFile.Entity;
			}
			set
			{
				StableFile previousValue = this._StableFile.Entity;
				if (((previousValue != value) 
							|| (this._StableFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StableFile.Entity = null;
						previousValue.TestResults.Remove(this);
					}
					this._StableFile.Entity = value;
					if ((value != null))
					{
						value.TestResults.Add(this);
						this._StableFileId = value.StableFileId;
					}
					else
					{
						this._StableFileId = default(int);
					}
					this.SendPropertyChanged("StableFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RunningOS")]
	public partial class RunningOS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OSId;
		
		private string _OS;
		
		private EntitySet<Environment> _Environments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOSIdChanging(int value);
    partial void OnOSIdChanged();
    partial void OnOSChanging(string value);
    partial void OnOSChanged();
    #endregion
		
		public RunningOS()
		{
			this._Environments = new EntitySet<Environment>(new Action<Environment>(this.attach_Environments), new Action<Environment>(this.detach_Environments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OSId
		{
			get
			{
				return this._OSId;
			}
			set
			{
				if ((this._OSId != value))
				{
					this.OnOSIdChanging(value);
					this.SendPropertyChanging();
					this._OSId = value;
					this.SendPropertyChanged("OSId");
					this.OnOSIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OS", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string OS
		{
			get
			{
				return this._OS;
			}
			set
			{
				if ((this._OS != value))
				{
					this.OnOSChanging(value);
					this.SendPropertyChanging();
					this._OS = value;
					this.SendPropertyChanged("OS");
					this.OnOSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RunningO_Environment", Storage="_Environments", ThisKey="OSId", OtherKey="OSId")]
		public EntitySet<Environment> Environments
		{
			get
			{
				return this._Environments;
			}
			set
			{
				this._Environments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Environments(Environment entity)
		{
			this.SendPropertyChanging();
			entity.RunningOS = this;
		}
		
		private void detach_Environments(Environment entity)
		{
			this.SendPropertyChanging();
			entity.RunningOS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StableFile")]
	public partial class StableFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StableFileId;
		
		private int _TestId;
		
		private int _EnvironmentId;
		
		private string _FilePath;
		
		private EntitySet<TestResult> _TestResults;
		
		private EntityRef<Environment> _Environment;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStableFileIdChanging(int value);
    partial void OnStableFileIdChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnEnvironmentIdChanging(int value);
    partial void OnEnvironmentIdChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    #endregion
		
		public StableFile()
		{
			this._TestResults = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults), new Action<TestResult>(this.detach_TestResults));
			this._Environment = default(EntityRef<Environment>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StableFileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StableFileId
		{
			get
			{
				return this._StableFileId;
			}
			set
			{
				if ((this._StableFileId != value))
				{
					this.OnStableFileIdChanging(value);
					this.SendPropertyChanging();
					this._StableFileId = value;
					this.SendPropertyChanged("StableFileId");
					this.OnStableFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL")]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnvironmentId", DbType="Int NOT NULL")]
		public int EnvironmentId
		{
			get
			{
				return this._EnvironmentId;
			}
			set
			{
				if ((this._EnvironmentId != value))
				{
					if (this._Environment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnvironmentIdChanging(value);
					this.SendPropertyChanging();
					this._EnvironmentId = value;
					this.SendPropertyChanged("EnvironmentId");
					this.OnEnvironmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StableFile_TestResult", Storage="_TestResults", ThisKey="StableFileId", OtherKey="StableFileId")]
		public EntitySet<TestResult> TestResults
		{
			get
			{
				return this._TestResults;
			}
			set
			{
				this._TestResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Environment_StableFile", Storage="_Environment", ThisKey="EnvironmentId", OtherKey="EnvironmentId", IsForeignKey=true)]
		public Environment Environment
		{
			get
			{
				return this._Environment.Entity;
			}
			set
			{
				Environment previousValue = this._Environment.Entity;
				if (((previousValue != value) 
							|| (this._Environment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Environment.Entity = null;
						previousValue.StableFiles.Remove(this);
					}
					this._Environment.Entity = value;
					if ((value != null))
					{
						value.StableFiles.Add(this);
						this._EnvironmentId = value.EnvironmentId;
					}
					else
					{
						this._EnvironmentId = default(int);
					}
					this.SendPropertyChanged("Environment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_StableFile", Storage="_Test", ThisKey="TestId", OtherKey="TestId", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.StableFiles.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.StableFiles.Add(this);
						this._TestId = value.TestId;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.StableFile = this;
		}
		
		private void detach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.StableFile = null;
		}
	}
}
#pragma warning restore 1591
